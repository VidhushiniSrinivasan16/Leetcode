{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 class Solution \{\
    public String decodeString(String s) \{\
        Stack<String> resStack = new Stack<>();\
        Stack<Integer> countStack = new Stack<>();\
        String res = "";\
        int idx = 0;\
        int n =s.length();\
        while(idx < n) \{\
            if(Character.isDigit(s.charAt(idx))) \{\
                int ct = 0;\
                while(Character.isDigit(s.charAt(idx))) \{\
                    ct = ct * 10 + (s.charAt(idx) - '0');\
                    idx++;\
                \}\
                countStack.add(ct);\
            \} else if (s.charAt(idx) == '[') \{\
                resStack.push(res);\
                res="";\
                idx++;\
            \} else if(s.charAt(idx) == ']') \{\
                StringBuilder tmp = new StringBuilder(resStack.pop());\
                int ct = countStack.pop();\
                while(ct > 0) \{\
                    tmp.append(res);\
                    ct--;\
                \}\
                res = tmp.toString();\
                idx++;\
            \} else \{\
                res+=s.charAt(idx++);\
            \}\
            \
        \}\
        return res;\
    \}\
\}}