class TrieNode
{
    TrieNode[] arr;
    boolean isLeaf;
    public  TrieNode()
    {
        arr=new TrieNode[26];
    }
}
public class WordDictionary {
      TrieNode root;
    /** Initialize your data structure here. */
    public WordDictionary() {
        root=new TrieNode();
    }
    
    /** Adds a word into the data structure. */
    public void addWord(String word) {
        TrieNode p=root;
        for(int i=0;i<word.length();i++)
        {
            char c=word.charAt(i);
            int idx=c-'a';
            if(p.arr[idx] == null)
            {
                TrieNode tmp=new TrieNode();
                p.arr[idx] = tmp;
                p=tmp;
            }else{
             p=p.arr[idx];   
            }
        }
        p.isLeaf=true;
    }
    
    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
    public boolean search(String word) {
        return dfsSearch(root,word,0);
    }
    
    public boolean dfsSearch(TrieNode p,String word,int start)
    {
        if(p.isLeaf && start==word.length())
        {
            return true;
        }
        if(start>=word.length())
        {
            return false;
        }
        char c=word.charAt(start);
        if(c=='.')
        {
            boolean result=false;
            for(int j=0;j<26;j++)
            {
                if(p.arr[j]!=null)
                {
                    if(dfsSearch(p.arr[j],word,start+1)){
                        result =true;
                        break;
                    }
                }
            }
           return result;
        }else{
            int idx=c-'a';
            if(p.arr[idx]!=null)
            {
                return dfsSearch(p.arr[idx],word,start+1);
            }else{
                return false;
            }
        }
        
    }
}

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary obj = new WordDictionary();
 * obj.addWord(word);
 * boolean param_2 = obj.search(word);
 */