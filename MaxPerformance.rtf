{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 class Solution \{\
    public int maxPerformance(int n, int[] speed, int[] efficiency, int k) \{\
        int[][] arr = new int[n][2];\
        for(int i=0;i<n;i++)\
            arr[i] = new int[] \{efficiency[i],speed[i]\};\
        Arrays.sort(arr,(a,b)->b[0]-a[0]);\
        PriorityQueue<Integer> pq = new PriorityQueue<>((a,b)->a-b);\
        long res=0; long sum=0;\
        int MOD = 1_000_000_007;\
        for(int[] ar: arr) \{\
            pq.add(ar[1]);\
            sum+=ar[1];\
            if(pq.size()>k) sum-=pq.poll();\
            res = Math.max(res,sum*ar[0]);\
        \}\
        return (int)(res%MOD);\
    \}\
\}}