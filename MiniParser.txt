/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * public interface NestedInteger {
 *     // Constructor initializes an empty nested list.
 *     public NestedInteger();
 *
 *     // Constructor initializes a single integer.
 *     public NestedInteger(int value);
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     public Integer getInteger();
 *
 *     // Set this NestedInteger to hold a single integer.
 *     public void setInteger(int value);
 *
 *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.
 *     public void add(NestedInteger ni);
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a single integer
 *     public List<NestedInteger> getList();
 * }
 */
class Solution {
    public NestedInteger deserialize(String s) {
        Stack<NestedInteger> st=new Stack<NestedInteger>();
        String temp="";
        for(char ch:s.toCharArray())
        {
            switch(ch)
            {
                case '[':
                    st.push(new NestedInteger());
                    break;
                case ']':
                    if(!temp.equals("")){
                        st.peek().add(new NestedInteger(Integer.parseInt(temp)));
                        temp="";
                    }
                    NestedInteger top=st.pop();
                    if(!st.isEmpty())
                    {
                        st.peek().add(top);
                    }else{
                        return top;
                    }
                    break;
                case ',':
                      if(!temp.equals(""))
                      {
                          st.peek().add(new NestedInteger(Integer.parseInt(temp)));
                          temp="";
                      }
                    break;
                default:
                    temp+=ch;
            }
        }
        if(!temp.equals(""))
            return new NestedInteger(Integer.parseInt(temp));
        return null;
    }
}