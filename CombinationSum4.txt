
//TLE
public class Solution {
    public int combinationSum4(int[] nums, int target) {
        List<List<Integer>> lis = new ArrayList<List<Integer>>();
        Arrays.sort(nums);
        backtrack(lis,new ArrayList<Integer>(),nums,target,0);
        return lis.size();
    }
    
    public void backtrack(List<List<Integer>> lis,List<Integer> tempLst,int[] nums,int target,int start)
    {
        if(target<0)
            return;
        if(target==0)
            lis.add(new ArrayList(tempLst));
        else{
            for(int i=0;i<nums.length;i++)
            {
                tempLst.add(nums[i]);
                backtrack(lis,tempLst,nums,target-nums[i],i);
                tempLst.remove(tempLst.size()-1);
            }
        }
    }
}


public class Solution {
    public int combinationSum4(int[] nums, int target) {
        if(nums==null||nums.length==0)
            return 0;
        int[] dp=new int[target+1];
        dp[0]=1;
        for(int i=0;i<=target;i++)
        {
            for(int num:nums)
            {
                if(i+num<=target)
                    dp[i+num]+=dp[i];
            }
        }
        return dp[target];
    }
}
