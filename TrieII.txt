//improved performance using Array


class TrieNode
{
    TrieNode[] arr;
    boolean isLeaf;
    public TrieNode()
    {
        arr=new TrieNode[26];
    }
}

public class Trie {
          TrieNode root;
    /** Initialize your data structure here. */
    public Trie() {
        root=new TrieNode();
    }
    
    /** Inserts a word into the trie. */
    public void insert(String word) {
        TrieNode p=root;
        for(int i=0;i<word.length();i++)
        {
            char c=word.charAt(i);
    
            int index = c - 'a';
            if(p.arr[index]==null)
            {
                TrieNode tmp=new TrieNode();
                p.arr[index]=tmp;
                p=tmp;
            }else{
                p=p.arr[index];
            }
        }
        p.isLeaf=true;
        
    }
    
    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        TrieNode p=searchNode(word);
        if(p!=null && p.isLeaf)
        return true;
        return false;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
          TrieNode p=searchNode(prefix);
        if(p!=null)
        return true;
        return false;
    }
    
    public TrieNode searchNode(String word){
        TrieNode p=root;
        for(int i=0;i<word.length();i++)
        {
            char c=word.charAt(i);
            int index=c-'a';
            if(p.arr[index]!=null)
            {
                p=p.arr[index];
            }else{
                return null;
            }
        }
        if(p==root)
        return null;
        
        return p;
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */