{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 class AutocompleteSystem \{\
    class TrieNode \{\
        Map<Character,TrieNode> children;\
        Map<String,Integer> counts;\
        public TrieNode() \{\
            this.children=new HashMap<>();\
            this.counts=new HashMap<>();\
        \}\
    \}\
    class Pair \{\
        String s;\
        int c;\
        public Pair(String s,int c) \{\
            this.s=s;\
            this.c=c;\
        \}\
    \}\
    TrieNode root;\
    StringBuilder prefix;\
    public AutocompleteSystem(String[] sentences, int[] times) \{\
        root=new TrieNode();\
        prefix=new StringBuilder();\
        for(int i=0;i<sentences.length;i++) \{\
            add(sentences[i],times[i]);\
        \}\
    \}\
    private void add(String s,int cnt) \{\
        TrieNode curr=root;\
        for(char c: s.toCharArray()) \{\
            TrieNode next = curr.children.get(c);\
            if(next==null) \{\
                next=new TrieNode();\
                curr.children.put(c,next);\
            \}\
            curr=next;\
            curr.counts.put(s,curr.counts.getOrDefault(s,0)+cnt);\
                \
        \}\
    \}\
    \
    public List<String> input(char c) \{\
        if(c=='#') \{\
            add(prefix.toString(),1);\
            prefix=new StringBuilder();\
            return new ArrayList<>();\
        \}\
        prefix.append(c);\
        TrieNode curr=root;\
        for(char cc: prefix.toString().toCharArray()) \{\
            TrieNode next=curr.children.get(cc);\
            if(next==null) \{\
                return new ArrayList<>();\
            \}\
            curr=next;\
        \}\
        PriorityQueue<Pair> pq = new PriorityQueue<>((a,b) -> a.c==b.c?a.s.compareTo(b.s):b.c-a.c);\
        for(Map.Entry<String,Integer> e: curr.counts.entrySet()) \{\
            pq.offer(new Pair(e.getKey(),e.getValue()));\
        \}\
        List<String> res = new ArrayList<>();\
        for(int i=0;i<3 && !pq.isEmpty();i++) \{\
            res.add(pq.poll().s);\
        \}\
        return res;\
    \}\
\}\
\
/**\
 * Your AutocompleteSystem object will be instantiated and called as such:\
 * AutocompleteSystem obj = new AutocompleteSystem(sentences, times);\
 * List<String> param_1 = obj.input(c);\
 */}