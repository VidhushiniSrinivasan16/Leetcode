//TLE

public class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> lis=new ArrayList<List<Integer>>();
        Arrays.sort(nums);
        backtrack(lis,new ArrayList(),nums,target,0);
        return lis;
    }
    
    public void backtrack(List<List<Integer>> lis,List<Integer> temp,int[] nums,int target,int start)
    {
        if(temp.size()==4 && target==0)
            lis.add(new ArrayList(temp));
        else{
            for(int i=start;i<nums.length;i++)
            {
                if(i>start && nums[i]==nums[i-1])continue;
                temp.add(nums[i]);
                backtrack(lis,temp,nums,target-nums[i],i+1);
                temp.remove(temp.size()-1);
            }
        }
    }
}



public class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> lis=new ArrayList<List<Integer>>();
        int n=nums.length;
        if(n<4)
            return lis;
        Arrays.sort(nums);
        for(int i=0;i<n;i++)
        {
            if(i>0 && nums[i]==nums[i-1])
                continue;
            for(int j=i+1;j<n;j++)
            {
                if(j>i+1 && nums[j]==nums[j-1])
                    continue;
                int start=j+1;
                int end=n-1;
                while(start<end)
                {
                    int curr=nums[i]+nums[j]+nums[start]+nums[end];
                    if(curr==target)
                    {
                        List<Integer> res=new ArrayList<Integer>();
                        res.add(nums[i]);
                        res.add(nums[j]);
                        res.add(nums[start]);
                        res.add(nums[end]);
                        lis.add(res);
                        do{start++;}while(start<end && nums[start]==nums[start-1]);
                        do{end--;}while(start<end && nums[end]==nums[end+1]);
                    }else if(curr>target){
                        end--;
                    }else{
                        start++;
                    }
                }
            }
        }
       
        return lis;
    }
    
}