/*
// Employee info
class Employee {
    // It's the unique id of each node;
    // unique id of this employee
    public int id;
    // the importance value of this employee
    public int importance;
    // the id of direct subordinates
    public List<Integer> subordinates;
};
*/
class Solution {
    int total_imp=0;
    public int getImportance(List<Employee> employees, int id) {
        Employee manager=employees.stream().filter(e-> e.id==id).collect(Collectors.toList()).get(0);
        total_imp+=manager.importance;
        manager.subordinates.forEach(subId->getImportance(employees,subId));
        return total_imp;
    }
}


Method 2

/*
// Employee info
class Employee {
    // It's the unique id of each node;
    // unique id of this employee
    public int id;
    // the importance value of this employee
    public int importance;
    // the id of direct subordinates
    public List<Integer> subordinates;
};
*/
class Solution {
    int total_imp=0;
    public int getImportance(List<Employee> employees, int id) {
       Map<Integer,Employee> map=new HashMap<Integer,Employee>();
       for(Employee emp:employees)
       {
           map.put(emp.id,emp);
       }
      return getRes(map,id);
    }
    
    public int getRes(Map<Integer,Employee> map,int id)
    {
        Employee manager = map.get(id);
        total_imp=manager.importance;
        for(int sub:manager.subordinates)
        {
            total_imp+=getRes(map,sub);
        }
        return total_imp;
    }
}