import java.util.*;
public class Solution {
    public int kthSmallest(int[][] matrix, int k) {
        int n=matrix.length;
        PriorityQueue<HeapNode> pq=new PriorityQueue<HeapNode>();
        for(int i=0;i<n;i++)
        {
            pq.offer(new HeapNode(0,i,matrix[0][i]));
        }
        for(int j=0;j<k-1;j++)
        {
            HeapNode hp=pq.poll();
            if(hp!=null && hp.row==n-1) continue;
            pq.offer(new HeapNode(hp.row+1,hp.col,matrix[hp.row+1][hp.col]));
        }
        return pq.poll().val;
        
    }
}
    
    class HeapNode implements Comparable<HeapNode>
    {
        int row,col,val;
        public  HeapNode(int r,int c,int v)
        {
            this.row=r;
            this.col=c;
            this.val=v;
        }
        
        @Override
        public int compareTo(HeapNode x)
        {
            return this.val-x.val;
        }
    }
