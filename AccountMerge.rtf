{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 class Solution \{\
    Map<String,List<String>> adjacent = new HashMap<>();\
    Set<String> visited = new HashSet<>();\
    public List<List<String>> accountsMerge(List<List<String>> accounts) \{\
        if(accounts==null)\
            return null;\
        for(List<String> account: accounts) \{\
            int size = account.size();\
            String first =account.get(1);\
            for(int i=2;i<size;i++) \{\
                String next = account.get(i);\
                if(!adjacent.containsKey(first))\
                    adjacent.put(first,new ArrayList<>());\
                adjacent.get(first).add(next);\
                if(!adjacent.containsKey(next))\
                    adjacent.put(next,new ArrayList<>());\
                adjacent.get(next).add(first);\
            \}\
        \}\
        \
        List<List<String>> mergedAccounts = new ArrayList<>();\
        for(List<String> account: accounts) \{\
            String name = account.get(0);\
            String first = account.get(1);\
            if(visited.contains(first))\
                continue;\
            List<String> merged = new ArrayList<>();\
            merged.add(name);\
            dfs(merged,first);\
            Collections.sort(merged.subList(1,merged.size()));\
            mergedAccounts.add(merged);\
        \}\
        return mergedAccounts;\
    \}\
    \
    private void dfs(List<String> merged, String email) \{\
        visited.add(email);\
        merged.add(email);\
        if(!adjacent.containsKey(email))\
            return;\
        for(String neighbor: adjacent.get(email)) \{\
            if(!visited.contains(neighbor))\
                dfs(merged,neighbor);\
        \}\
    \}\
\}}