/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val,List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/
class Solution {
    public int maxDepth(Node root) {
        if(root==null){
            return 0;
        }
        int height=0;
        Queue<Node> level=new LinkedList<Node>();
        level.add(root);
        while(!level.isEmpty()){
            int nodeCount=level.size();
            if(!level.isEmpty()){
                 height++;
            }
            while(nodeCount>0){
                Node tmp=level.poll();

            for(Node node:tmp.children){
                level.add(node);
            }
            nodeCount--;
            }
        }
        return height;
    }
}