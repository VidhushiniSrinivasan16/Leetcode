class Solution {
     private class TrieNode{
        TrieNode[] arr;
        String word=null;
        public TrieNode(){
            arr=new TrieNode[26];
        }
    }
    public List<String> findWords(char[][] board, String[] words) {
        List<String> res=new ArrayList<String>();
        TrieNode t=buildTrie(words);
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[0].length;j++){
                dfs(board,i,j,t,res);
            }
        }
        return res;
    }
    private TrieNode buildTrie(String[] words){
        TrieNode root=new TrieNode();
        for(String w: words){
            TrieNode p=root;
            for(char c:w.toCharArray()){
                int idx=c-'a';
                if(p.arr[idx]==null){
                    p.arr[idx]=new TrieNode();
                }
                p=p.arr[idx];
            }
            //System.out.println(p.word);
            p.word=w;
        }
        return root;
    }
    private void dfs(char[][] board,int i,int j,TrieNode p,List<String> res){
        char c=board[i][j];
        if(c=='#'||p.arr[c-'a']==null) return;
        p=p.arr[c-'a'];
        if(p.word!=null){
            res.add(p.word);
            p.word=null;
        }
        board[i][j]='#';
        if(i>0) dfs(board,i-1,j,p,res);
        if(j>0) dfs(board,i,j-1,p,res);
        if(i<board.length-1) dfs(board,i+1,j,p,res);
        if(j<board[0].length-1) dfs(board,i,j+1,p,res);
        board[i][j]=c;
    }
}