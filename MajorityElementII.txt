public class Solution {
    public List<Integer> majorityElement(int[] nums) {
        List<Integer> result=new ArrayList<Integer>();
        if(nums==null)
            return result;
        int poten_val=nums.length/3;
        int n=nums.length;
        HashMap<Integer,Integer> map=new HashMap<Integer,Integer>();
        for(int i=0;i<n;i++)
        {
            map.put(nums[i],map.getOrDefault(nums[i],0)+1);
            if(map.getOrDefault(nums[i],0) > poten_val && !result.contains(nums[i]))
                result.add(nums[i]);
           
        }
        return result;
    }
}

Moore's algo extn
public class Solution {
    public List<Integer> majorityElement(int[] nums) {
        List<Integer> lis=new ArrayList<Integer>();
        int n=nums.length;
        int c1=0,c2=0;
        Integer res1=null,res2=null;
        for(int i:nums)
        {
           if(res1!=null && i==res1) 
           {
               c1++;
           }else if(res2!=null && i==res2){
               c2++;
           }else if(c1==0){
               res1=i;
               c1=1;
           }else if(c2==0){
               res2=i;
               c2=1;
           }else{
               c1--;
               c2--;
           }
        }
        c1=c2=0;
        for(int k:nums)
        {
            if(k==res1)
            {
                c1++;
            }else if(k==res2){
                c2++;
            }
        }
        if(c1>n/3)
            lis.add(res1);
        if(c2>n/3)
            lis.add(res2);
        return lis;
    }
}