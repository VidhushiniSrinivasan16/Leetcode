{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 class Solution \{\
    public List<List<String>> suggestedProducts(String[] products, String searchWord) \{\
        Arrays.sort(products);\
        List<List<String>> results = new ArrayList<>();\
        int start = 0, bStart=0, n = products.length;\
        String prefix="";\
        for(char c: searchWord.toCharArray()) \{\
            prefix+=c;\
            \
            results.add(new ArrayList<String>());\
            start = binarySearch(products, bStart, prefix);\
            \
            for(int i=start;i<Math.min(start+3,n);i++) \{\
                if(products[i].length()<prefix.length() ||\
                  !products[i].substring(0,prefix.length()).equals(prefix))\
                    break;\
                results.get(results.size()-1).add(products[i]);\
            \}\
            bStart = Math.abs(start);\
        \}\
        return results;\
    \}\
    \
    private int binarySearch(String[] products, int start, String prefix) \{\
        int i = start; \
        int j = products.length;\
        while(i < j) \{\
            int mid = i+(j-i)/2;\
            if(products[mid].compareTo(prefix)>=0)\
                j=mid;\
            else\
                i=mid+1;\
        \}\
        return i;\
    \}\
\}\
\
\
\
class Solution \{\
    class Trie \{\
         class Node \{\
             boolean isWord;\
             List<Node> children = Arrays.asList(new Node[26]);\
         \}\
        \
        Node root, curr;\
        List<String> resultBuffer;\
        \
        Trie() \{\
            root = new Node();\
        \}\
        \
        public void insert(String s) \{\
            curr = root;\
            for(char c: s.toCharArray()) \{\
                if(curr.children.get(c-'a')==null)\
                    curr.children.set(c-'a', new Node());\
                curr = curr.children.get(c-'a');\
            \}\
            curr.isWord=true;\
        \}\
        \
        private  void dfs(Node curr, String word) \{\
            if(resultBuffer.size()==3)\
                return;\
            if(curr.isWord)\
                resultBuffer.add(word);\
            for(char c ='a';c<='z';c++) \{\
                if(curr.children.get(c-'a')!=null)\
                    dfs(curr.children.get(c-'a'), word+c);\
            \}\
        \}\
        \
        public List<String> getWordsWithPrefix(String word) \{\
            curr = root;\
            resultBuffer = new ArrayList<>();\
            for(char c: word.toCharArray()) \{\
                if(curr.children.get(c - 'a')==null)\
                    return resultBuffer;\
                curr=curr.children.get(c-'a');\
            \}\
            dfs(curr, word);\
            return resultBuffer;\
        \}\
    \}\
    public List<List<String>> suggestedProducts(String[] products, String searchWord) \{\
        Trie trie = new Trie();\
        \
        List<List<String>> result = new ArrayList<>();\
        \
        for(String word: products)\
            trie.insert(word);\
        \
        String prefix = "";\
        for(char c : searchWord.toCharArray()) \{\
            prefix+=c;\
            result.add(trie.getWordsWithPrefix(prefix));\
        \}\
        return result;\
            \
    \}\
\}}