class Solution {
    public boolean canPartitionKSubsets(int[] nums, int k) {
        int sum=0;
        for(int num:nums)
        {
            sum+=num;
        }
        if(k<=0||sum%k!=0) return false;
        boolean[] visited=new boolean[nums.length];
        return canPartition(nums,visited,0,k,0,0,sum/k);
    }
    
    public boolean canPartition(int[] nums,boolean[] visited,int s_idx,int k,int cur_sum,int num_of_elts,int target)
    {
        if(k==1) return true;
        if(cur_sum==target && num_of_elts > 0) return canPartition(nums,visited,0,k-1,0,0,target);
        for(int i=s_idx;i<nums.length;i++)
        {
            if(visited[i]==false)
            {
                visited[i]=true;
                if(canPartition(nums,visited,i+1,k,cur_sum+nums[i],num_of_elts++,target)) return true;
                visited[i]=false;
            }
        }
        return false;
    }
}