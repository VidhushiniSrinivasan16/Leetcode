/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
    public List<Interval> merge(List<Interval> intervals) {
        if(intervals.size()<=1)
            return intervals;
        intervals.sort((l1,l2)->Integer.compare(l1.start,l2.start));
        int start=intervals.get(0).start;
        int end=intervals.get(0).end;
        List<Interval> lis=new ArrayList<Interval>();
        for(Interval inter:intervals)
        {
            if(inter.start<=end)
            {
                end=Math.max(end,inter.end);
            }else{
                lis.add(new Interval(start,end));
                start=inter.start;
                end=inter.end;
            }
        }
        
        lis.add(new Interval(start,end));
        return lis;
        
    }
}