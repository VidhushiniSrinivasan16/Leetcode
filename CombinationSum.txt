public class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> lis=new ArrayList<List<Integer>>();
        Arrays.sort(candidates);
        backtrack(lis,new ArrayList<>(),candidates,target,0);
        return lis;
    }
    
    public void backtrack(List<List<Integer>> lis,List<Integer> tempLst,int[] nums,int target,int start)
    {
        if(target<0)return;
        if(target==0)
            lis.add(new ArrayList(tempLst));
        else
        {
            for(int i=start;i<nums.length;i++)
            {
                tempLst.add(nums[i]);
                backtrack(lis,tempLst,nums,target-nums[i],i);
                tempLst.remove(tempLst.size()-1);
            }
        }
    }
}