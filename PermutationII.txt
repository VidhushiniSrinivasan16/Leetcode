public class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> lis=new ArrayList<List<Integer>>();
        Arrays.sort(nums);
        backtrack(lis,new ArrayList<Integer>() ,nums,new boolean[nums.length]);
        return lis;
    }
    
    public void backtrack(List<List<Integer>> lis, List<Integer> tempLst,int[]nums,boolean[] used)
    {
        if(tempLst.size()==nums.length)
        {
            lis.add(new ArrayList<Integer>(tempLst));
        }else{
            for(int i=0;i<nums.length;i++)
            {
                if(used[i]|| i>0 && nums[i]==nums[i-1] && !used[i-1])
                    continue;
                used[i]=true;
                tempLst.add(nums[i]);
                backtrack(lis,tempLst,nums,used);
                used[i]=false;
                tempLst.remove(tempLst.size()-1);
            }   
                
        }
    }
}