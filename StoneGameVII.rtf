{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 class Solution \{\
    int[][] dp;\
    public int stoneGameVII(int[] stones) \{\
        int sum=0;\
        int n=stones.length;\
        dp = new int[1001][1001];\
        for(int i=0;i<1001;i++)\
                Arrays.fill(dp[i],Integer.MIN_VALUE);\
        for(int i=0;i<n;i++)\
            sum+=stones[i];\
        return dfs(stones,sum,0,n-1,dp);\
    \}\
    \
    private int dfs(int[] stones, int total, int l, int r, int[][] dp) \{\
        if(l==r)\
            return 0;\
        if(dp[l][r]!=Integer.MIN_VALUE)\
            return dp[l][r];\
        int ans1 = total-stones[l]-dfs(stones,total-stones[l],l+1,r,dp);\
        int ans2 = total-stones[r]-dfs(stones,total-stones[r],l,r-1,dp);\
        return dp[l][r]=Math.max(ans1,ans2);\
    \}\
\}}