//Min in right subtree for two child

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode deleteNode(TreeNode root, int key) {
        if(root==null)
            return root;
        if(key<root.val) root.left=deleteNode(root.left,key);
        else if(key > root.val) root.right=deleteNode(root.right,key);
            else{
                if(root.left==null && root.right==null)
                    return null;
                else if(root.left==null)
                    return root.right;
                else if(root.right==null)
                    return root.left;
                else{
                root.val=findMin(root.right);
                root.right=deleteNode(root.right,root.val);
                }
            }
        return root;
    }
    
    public int findMin(TreeNode root)
    {
        while(root.left!=null)
        {
            
            root=root.left;
        }
        return root.val;
    }
}

//max in left subtree for two child

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode deleteNode(TreeNode root, int key) {
        if(root==null)
            return root;
        if(key<root.val) root.left=deleteNode(root.left,key);
        else if(key > root.val) root.right=deleteNode(root.right,key);
            else{
                if(root.left==null && root.right==null)
                    return null;
                else if(root.left==null)
                    return root.right;
                else if(root.right==null)
                    return root.left;
                else{
                root.val=findMax(root.left);
                root.left=deleteNode(root.left,root.val);
                }
            }
        return root;
    }
    
    public int findMax(TreeNode root)
    {
        while(root.right!=null)
        {
            root=root.right;
        }
        return root.val;
    }
}