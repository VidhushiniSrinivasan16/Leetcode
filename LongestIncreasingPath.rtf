{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 class Solution \{\
    int[][] dirs = \{\{1,0\},\{0,1\},\{0,-1\},\{-1,0\}\};\
    public int longestIncreasingPath(int[][] matrix) \{\
        int m = matrix.length;\
        int n = matrix[0].length;\
        int len = 0;\
        int[][] cache = new int[m][n];\
        int max = 1;\
        for(int i = 0;i<m;i++) \{\
            for(int j=0;j<n;j++) \{\
                len = dfs(matrix, i, j, m, n, cache);\
                max = Math.max(max,len);\
            \}\
        \}\
        return max;\
    \}\
    \
    private int dfs(int[][] matrix, int i, int j, int m, int n, int[][] cache) \{\
        if(cache[i][j] != 0)\
            return cache[i][j];\
        int max = 1;\
        int len = 0;\
        for(int[]  dir : dirs) \{\
            int x = i+dir[0], y = j+dir[1];\
            if(x<0 || x>=m || y<0 || y>=n || matrix[x][y]<=matrix[i][j])\
                continue;\
            len = 1+dfs(matrix,x,y,m,n,cache);\
            max = Math.max(max, len);\
        \}\
        cache[i][j]=max;\
        return max;\
    \}\
\}}