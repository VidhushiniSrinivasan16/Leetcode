{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 class Solution \{\
    private int n, d;\
    private int[][] memo;\
    private int[] jobDifficulty;\
    private int[] hardestJobRemaining;\
    \
    private int dp(int i, int day) \{\
        // Base case, it's the last day so we need to finish all the jobs\
        if (day == d) \{\
            return hardestJobRemaining[i];\
        \}\
        \
        if (memo[i][day] == 0) \{\
            int best = Integer.MAX_VALUE;\
            int hardest = 0;\
            // Iterate through the options and choose the best\
            for (int j = i; j < n - (d - day); j++) \{\
                hardest = Math.max(hardest, jobDifficulty[j]);\
                // Recurrence relation\
                best = Math.min(best, hardest + dp(j + 1, day + 1));\
            \}\
            memo[i][day] = best;\
        \}\
        \
        return memo[i][day];\
    \}\
    \
    public int minDifficulty(int[] jobDifficulty, int d) \{\
        n = jobDifficulty.length;\
        // If we cannot schedule at least one job per day, \
        // it is impossible to create a schedule\
        if (n < d) \{\
            return -1;\
        \}\
        \
        hardestJobRemaining = new int[n];\
        int hardestJob = 0;\
        for (int i = n - 1; i >= 0; i--) \{\
            hardestJob = Math.max(hardestJob, jobDifficulty[i]);\
            hardestJobRemaining[i] = hardestJob;\
        \}\
        \
        this.d = d;\
        this.jobDifficulty = jobDifficulty;\
        memo = new int[n][d + 1];\
        return dp(0, 1);\
    \}\
\}\
\
class Solution \{\
    public int minDifficulty(int[] jobDifficulty, int d) \{\
        int n=jobDifficulty.length;\
        if(n<d)\
            return -1;\
        int[][] dp = new int[n][d+1];\
        for(int[] row:dp)\
            Arrays.fill(row,Integer.MAX_VALUE);\
        dp[n-1][d]=jobDifficulty[n-1];\
        for(int i=n-2;i>=0;i--)\
            dp[i][d]=Math.max(dp[i+1][d],jobDifficulty[i]);\
        for(int day=d-1;day>0;day--) \{\
            for(int i=day-1;i<n-(d-day);i++) \{\
                int hardest=0;\
                for(int j=i;j<n-(d-day);j++) \{\
                    hardest= Math.max(hardest,jobDifficulty[j]);\
                    dp[i][day]=Math.min(dp[i][day],hardest+dp[j+1][day+1]);\
                \}\
                \
            \}\
        \}\
        return dp[0][1];    \
    \}\
\}}