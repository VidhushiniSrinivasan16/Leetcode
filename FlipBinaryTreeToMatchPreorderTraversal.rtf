{\rtf1\ansi\ansicpg1252\cocoartf2578
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /**\
 * Definition for a binary tree node.\
 * public class TreeNode \{\
 *     int val;\
 *     TreeNode left;\
 *     TreeNode right;\
 *     TreeNode() \{\}\
 *     TreeNode(int val) \{ this.val = val; \}\
 *     TreeNode(int val, TreeNode left, TreeNode right) \{\
 *         this.val = val;\
 *         this.left = left;\
 *         this.right = right;\
 *     \}\
 * \}\
 */\
class Solution \{\
    List<Integer> flipped;\
    int index;\
    int[] voyage;\
    public List<Integer> flipMatchVoyage(TreeNode root, int[] voyage) \{\
        flipped = new ArrayList<>();\
        index = 0;\
        this.voyage = voyage;\
        dfs(root);\
        if(!flipped.isEmpty() && flipped.get(0)==-1) \{\
            flipped.clear();\
            flipped.add(-1);\
        \}\
        return flipped;\
    \}\
    \
    public void dfs(TreeNode node) \{\
        if(node!=null) \{\
            if(node.val != voyage[index++]) \{\
                flipped.clear();\
                flipped.add(-1);\
                return;\
            \}\
            \
            if(index < voyage.length && node.left!=null && node.left.val != voyage[index]) \{\
                flipped.add(node.val);\
                dfs(node.right);\
                dfs(node.left);\
            \}else \{\
                dfs(node.left);\
                dfs(node.right);\
            \}\
        \}\
        \
    \}\
\}}