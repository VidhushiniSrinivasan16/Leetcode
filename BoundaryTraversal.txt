package test;

public class BoundaryTraversal {

	public static void main(String[] args) {
		BinaryTree tree = new BinaryTree();
        tree.root = new TreeNode(20);
        tree.root.left = new TreeNode(8);
        tree.root.left.left = new TreeNode(4);
        tree.root.left.right = new TreeNode(12);
        tree.root.left.right.left = new TreeNode(10);
        tree.root.left.right.right = new TreeNode(14);
        tree.root.right = new TreeNode(22);
        tree.root.right.right = new TreeNode(25);
        tree.printBoundary(tree.root);

	}

}

class TreeNode
{
	int val;
	TreeNode left,right;
	
	public TreeNode(int v){
		this.val=v;
		left=right=null;
		
	}
}

class BinaryTree
{
	TreeNode root;
	public void printBoundary(TreeNode node)
	{
		if(node!=null){
			System.out.print(node.val+" ");
			printLeftBoundary(node.left);
			printLeaves(node.left);
			printLeaves(node.right);
			printRightBoundary(node.right);
		}
	}
	public void printLeftBoundary(TreeNode node)
	{
		if(node!=null){
			if(node.left!=null){
				System.out.print(node.val+" ");
				printLeftBoundary(node.left);
			}else if(node.right!=null){
				System.out.print(node.val+" ");
				printLeftBoundary(node.right);
			}
		}
	}
	public void printRightBoundary(TreeNode node)
	{
		if(node!=null){
			if(node.left!=null){
				printLeftBoundary(node.left);
				System.out.print(node.val+" ");
			}else if(node.right!=null){
				printLeftBoundary(node.right);
				System.out.print(node.val+" ");
			}
		}
	}
	
	public void printLeaves(TreeNode node)
	{
		if(node!=null){
			printLeaves(node.left);
			if(node.left==null && node.right==null)
				System.out.print(node.val+" ");
			printLeaves(node.right);
		}
	}
}
