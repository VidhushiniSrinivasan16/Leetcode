{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 class Solution \{\
    public int minSetSize(int[] arr) \{\
        Map<Integer,Integer> map = new HashMap<>();\
        for(int n : arr) \{\
            map.put(n,map.getOrDefault(n,0)+1);\
        \}\
       PriorityQueue<Map.Entry<Integer,Integer>> pq = new PriorityQueue<>((a,b) -> b.getValue() - a.getValue());\
        pq.addAll(map.entrySet());\
        int n = arr.length;\
        int count=0, curSize=0;\
        while(!pq.isEmpty() && curSize < n/2) \{\
           curSize+=pq.poll().getValue();\
            count++;\
            if(curSize>=n/2)\{\
                break;\
            \}\
        \}\
        return count;\
    \}\
\}}