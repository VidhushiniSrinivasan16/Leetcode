public class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> lis= new ArrayList<List<String>>();
        backtrack(lis,new ArrayList<>(),s,0);
        return lis;
    }
    
    public void backtrack(List<List<String>> lis,List<String> tempLst,String s,int start )
    {
        if(start==s.length())
            lis.add(new ArrayList(tempLst));
        else{
            for(int i=start;i<s.length();i++)
            {
                if(isPalindrome(s,start,i))
                {
                    tempLst.add(s.substring(start,i+1));
                    backtrack(lis,tempLst,s,i+1);
                    tempLst.remove(tempLst.size()-1);
                }
            }
        }
    }
    
    public boolean isPalindrome(String s,int low,int high)
    {
        while(low<high)
            if(s.charAt(low++)!=s.charAt(high--)) return false;
        return true;
    }
}