//Bucket Sort 31ms - 35 test cases
public class Solution {
    public String frequencySort(String s) {
        if(s==null||s.length()<2)
            return s;
        Map<Character,Integer> map=new HashMap<Character,Integer>();
        for(char c: s.toCharArray())
        {
            map.put(c,map.getOrDefault(c,0)+1);
        }
        List<Character>[] bucket=new List[s.length()+1];
        for(char c:map.keySet())
        {
            int freq=map.get(c);
            if(bucket[freq]==null)
            {
               bucket[freq]=new ArrayList<Character>(); 
            }
            bucket[freq].add(c);
        }
        StringBuilder sb=new StringBuilder();
        for(int i=bucket.length-1;i>=0;i--)
        {
            if(bucket[i]!=null)
            {
                for(char c: bucket[i])
                {
                    for(int j=1;j<=i;j++)
                        sb.append(c);
                }
            }
        }
        return sb.toString();
    }
}

//Priority Queue - 49ms - 35 test cases


public class Solution {
    public String frequencySort(String s) {
        if(s==null||s.length()<2)
            return s;
        Map<Character,Integer> map=new HashMap<Character,Integer>();
        for(char c:s.toCharArray())
        {
            map.put(c,map.getOrDefault(c,0)+1);
        }
        PriorityQueue<Map.Entry<Character,Integer>> pq=new PriorityQueue<>(
        new Comparator<Map.Entry<Character,Integer>>(){
            @Override
            public int compare(Map.Entry<Character,Integer> a,Map.Entry<Character,Integer> b)
            {
                return b.getValue()-a.getValue();
            }
        });
        
        pq.addAll(map.entrySet());
        StringBuilder sb=new StringBuilder();
        while(!pq.isEmpty())
        {
            Map.Entry e=pq.poll();
            for(int i=1;i <= (int)e.getValue();i++)
                sb.append(e.getKey());
        }
        return sb.toString();
    }
}