{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Class Solution \{\
Public int largestUniqueNumber(int[] nums) \{\
\
for(int n : nums) \{\
map.put(n, map.getOrDefault(n,0)+1);\
\}\
PriorityQueue<Map.Entry<Integer,Integer>> pq = new PriorityQueue<>(new Comparator<Map.Entry<Integer,Integer>() \{\
\
@Override\
Public int compare(Map.Entry<Integer,Integer> a, Map.Entry<Integer,Integer> b) \{\
Return b.getKey()-a.getKey()\
\}\
\});\
Pq.addAll(map.entrySet());\
while(!pq.isEmpty()) \{\
Map.Entry entry = pq.poll();\
if((int)entry.getValue() ==1) \{\
Return (int)pq.getKey();\
\}\
\
\}\
Return -1;\
\
\}\
\}}