{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 class Solution \{\
    public List<List<String>> findDuplicate(String[] paths) \{\
        Map<String, List<String>> map = new HashMap<>();\
        for(String path: paths) \{\
            String[] values = path.split(" ");\
            for(int i=1;i<values.length;i++) \{\
                String[] name_cont = values[i].split("\\\\(");\
                name_cont[1] =name_cont[1].replace(")","");\
                List<String> list = map.getOrDefault(name_cont[1], new ArrayList<>());\
                list.add(values[0]+"/"+name_cont[0]);\
                map.put(name_cont[1], list);\
            \}\
        \}\
        \
        List<List<String>> res = new ArrayList<List<String>>();\
        for(String key : map.keySet()) \{\
            List<String> lis = map.get(key);\
            if(lis.size()>1) \{\
                res.add(lis);\
            \}\
        \}\
        return res;\
    \}\
\}}