{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /**\
 * This is the interface for the expression tree Node.\
 * You should not remove it, and you can define some classes to implement it.\
 */\
\
abstract class Node \{\
    public abstract int evaluate();\
    // define your fields here\
    String val;\
    Node left,right;\
\};\
\
class MyNode extends Node \{\
    public MyNode(String v, Node left, Node right) \{\
        this.val=v;\
        this.left=left;\
        this.right=right;\
    \}\
    public int evaluate() \{\
        if(left==null && right==null)\
            return Integer.valueOf(val);\
        int l=left.evaluate();\
        int r = right.evaluate();\
        switch(val) \{\
                case "+": return l+r;\
                case "-": return r-l;\
                case "*": return l*r;\
                case "/": return r/l;\
                \
        \}\
        return -1;\
    \}\
\}\
\
/**\
 * This is the TreeBuilder class.\
 * You can treat it as the driver code that takes the postinfix input \
 * and returns the expression tree represnting it as a Node.\
 */\
\
class TreeBuilder \{\
    Stack<MyNode> st = new Stack<>();\
    Node buildTree(String[] postfix) \{\
        for(int i=0;i<postfix.length;i++) \{\
            switch(postfix[i]) \{\
                case "+":\
                case "-": \
                case "*": \
                case "/":\
                    st.push(new MyNode(postfix[i],st.pop(),st.pop()));\
                    break;\
                default:\
                    st.push(new MyNode(postfix[i],null,null));\
            \}\
        \}\
        return st.pop();\
    \}\
\};\
\
\
/**\
 * Your TreeBuilder object will be instantiated and called as such:\
 * TreeBuilder obj = new TreeBuilder();\
 * Node expTree = obj.buildTree(postfix);\
 * int ans = expTree.evaluate();\
 */}