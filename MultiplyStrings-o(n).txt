import java.math.BigInteger;
class Solution {
    public String multiply(String num1, String num2) {
        if(num1==null||num2==null)
            return new String("");
        num1=num1.trim();
        num2=num2.trim();
        if(num1.isEmpty()||num2.isEmpty())
            return new String("");
        List<Long> lis=new ArrayList<Long>();
        int k=0,l=0;
        int carry=0;
        int n=num2.length();
        int m=num1.length();

        if(n>m) // reduce time complexity to order of number of digits in small number(num1,num2)
        {
            String temp=num2;
            num2=num1;
            num1=temp;
        }
        BigInteger val1=new BigInteger(num1);
        BigInteger finalval=new BigInteger("0");
        for(int i=num2.length()-1;i>=0;i--)
        {
            StringBuilder sb=new StringBuilder();
            BigInteger res=val1.multiply(new BigInteger(String.valueOf(num2.charAt(i))));
            sb.append(res.toString());
            int temp=l;
            while(l>0){
                sb.append("0");
                l--;
            }
            l=temp+1;
            finalval=finalval.add(new BigInteger(sb.toString()));
        }
        return finalval.toString();
    }
}