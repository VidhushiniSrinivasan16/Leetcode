{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 class MaxStack \{\
    class Node \{\
        int val;\
        Node prev,next;\
        Node(int v) \{\
            this.val=v;\
        \}\
    \}\
    TreeMap<Integer,List<Node>> map;\
    Node head,end;\
    \
    public MaxStack() \{\
        map= new TreeMap<>();\
        head=null; end=null;\
    \}\
    \
    public void push(int x) \{\
        Node node = new Node(x);\
        if(head!=null) \{\
            head.prev=node;\
            node.next=head;\
        \}\
        head=node;\
        if(end==null) \{\
            end=head;\
        \}\
        if(!map.containsKey(x))\
            map.put(x,new ArrayList<>());\
        map.get(x).add(node);\
        \
    \}\
    \
    public int pop() \{\
        if(head==null)\
            return -1;\
        \
        int val = head.val;\
        head=head.next;\
        if(head!=null)\
            head.prev=null;\
        else\
            end=null;\
        List<Node> lis=map.get(val);\
        Node n= lis.get(lis.size()-1);\
        if(n.prev!=null)\
           n.prev.next=n.next;\
        else \{\
            head=n.next;\
        \}\
        if(n.next!=null)\
           n.next.prev=n.prev;\
        else \{\
            end=n.prev;\
        \}\
        List<Node> temp =map.get(val);\
        temp.remove(lis.size()-1);\
        if(temp.isEmpty())\
            map.remove(val);\
        return val;\
            \
    \}\
    \
    public int top() \{\
        if(head==null)\
            return -1;\
        return head.val;\
    \}\
    \
    public int peekMax() \{\
        if(head==null)\
            return -1;\
        return map.lastKey();\
    \}\
    \
    public int popMax() \{\
        int max= peekMax();\
        List<Node> lis= map.get(max);\
        Node n= lis.get(lis.size()-1);\
        if(n.prev!=null)\
           n.prev.next=n.next;\
        else \{\
            head=n.next;\
        \}\
        if(n.next!=null)\
           n.next.prev=n.prev;\
        else \{\
            end=n.prev;\
        \}\
        List<Node> temp =map.get(max);\
        temp.remove(temp.size()-1);\
        if(temp.isEmpty())\
            map.remove(max);\
        return max;\
    \}\
\}\
\
/**\
 * Your MaxStack object will be instantiated and called as such:\
 * MaxStack obj = new MaxStack();\
 * obj.push(x);\
 * int param_2 = obj.pop();\
 * int param_3 = obj.top();\
 * int param_4 = obj.peekMax();\
 * int param_5 = obj.popMax();\
 */}