{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /**\
 * Definition for a binary tree node.\
 * public class TreeNode \{\
 *     int val;\
 *     TreeNode left;\
 *     TreeNode right;\
 *     TreeNode(int x) \{ val = x; \}\
 * \}\
 */\
class Solution \{\
    public TreeNode balanceBST(TreeNode root) \{\
        List<TreeNode> nodes = new ArrayList<>();\
        inorder(root, nodes);\
        return buildBalancedBST(nodes,0,nodes.size() -1);\
    \}\
    \
    public void inorder(TreeNode root, List<TreeNode> nodes) \{\
        if(root==null)\
            return;\
        inorder(root.left,nodes);\
        nodes.add(root);\
        inorder(root.right,nodes);\
    \}\
    \
    public TreeNode buildBalancedBST(List<TreeNode> nodes,int start,int end) \{\
        if(start > end)\
            return null;\
        int mid=(start+end)/2;\
        TreeNode node = nodes.get(mid);\
        node.left = buildBalancedBST(nodes,start,mid-1);\
        node.right=buildBalancedBST(nodes,mid+1,end);\
        return node;\
    \}\
\}}