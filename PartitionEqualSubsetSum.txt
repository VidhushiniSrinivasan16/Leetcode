##Time Limit Exceeded
Recursion

class Solution {
    public boolean canPartition(int[] nums) {
        int sum = 0;
        for(int n:nums)
            sum+=n;
        if(sum%2!=0)
            return false;
        return canPartition(nums,nums.length,sum/2);
    }
     public boolean canPartition(int[] nums, int n, int sum) {
         if(sum==0)
             return true;
         if(n==0 && sum!=0)
             return false;
         if(nums[n-1]>sum)
             return canPartition(nums,n-1,sum);
         return canPartition(nums,n-1,sum)|| canPartition(nums,n-1,sum-nums[n-1]);
     }
}
 DP

class Solution {
    public boolean canPartition(int[] nums) {
        int sum = 0;
        int n = nums.length;
        for(int l:nums) 
            sum+=l;
        if(sum%2!=0)
            return false;
       
            
        boolean[][] dp = new boolean[sum/2+1][n+1];
        
        for(int i=0;i<=n;i++)
            dp[0][i]=true;
        
        for(int i=1;i<=sum/2;i++)
            dp[i][0] = false;
             
        for(int i=1;i<=sum/2;i++){
            for(int j=1;j<=n;j++) {
                dp[i][j] = dp[i][j-1];
                if(i>=nums[j-1])
                    dp[i][j]=dp[i][j]||dp[i-nums[j-1]][j-1];
            }
        }
        return dp[sum/2][n];
    }
}
