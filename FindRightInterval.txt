/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
    public int[] findRightInterval(Interval[] intervals) {
        int n=intervals.length;
        int[] res=new int[n];
        if(intervals==null||n==0)
            return res;
        TreeMap<Integer,Integer> map=new TreeMap<Integer,Integer>();
        for(int i=0;i<n;i++)
        {
            map.put(intervals[i].start,i);
        }
        for(int i=0;i<n;i++)
        {
            Map.Entry<Integer,Integer> entry=map.ceilingEntry(intervals[i].end);
            res[i] = (entry!=null)?entry.getValue():-1;
        }
      return res;  
    }
}