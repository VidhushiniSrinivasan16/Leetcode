{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
// Definition for a Node.\
class Node \{\
    public int val;\
    public List<Node> neighbors;\
    public Node() \{\
        val = 0;\
        neighbors = new ArrayList<Node>();\
    \}\
    public Node(int _val) \{\
        val = _val;\
        neighbors = new ArrayList<Node>();\
    \}\
    public Node(int _val, ArrayList<Node> _neighbors) \{\
        val = _val;\
        neighbors = _neighbors;\
    \}\
\}\
*/\
\
class Solution \{\
    Map<Integer, Node> map = new HashMap<>();\
    public Node cloneGraph(Node node) \{        \
        return clone(node);\
    \}\
    \
    private Node clone(Node node) \{\
        if(node == null)\
            return null;\
        if(map.containsKey(node.val))\
            return map.get(node.val);\
        Node clonedNode = new Node(node.val);\
        map.put(node.val, clonedNode);\
        for(Node n: node.neighbors) \{\
            clonedNode.neighbors.add(clone(n));\
        \}\
        return clonedNode;\
    \}\
\}}