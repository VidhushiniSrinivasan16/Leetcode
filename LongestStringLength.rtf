{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 class Solution \{\
    private int dfs(Set<String> words, Map<String, Integer> memo, String currentWord) \{\
        if(memo.containsKey(currentWord)) \{\
            return memo.get(currentWord);\
        \}\
        int maxLength = 1;\
        StringBuilder sb = new StringBuilder(currentWord);\
        \
        for(int i=0;i< currentWord.length();i++) \{\
            sb.deleteCharAt(i);\
            String newWord = sb.toString();\
            \
            if(words.contains(newWord)) \{\
                int currLength = 1+ dfs(words, memo, newWord);\
                maxLength = Math.max(currLength, maxLength);\
            \}\
            sb.insert(i, currentWord.charAt(i));\
        \}\
        memo.put(currentWord, maxLength);\
        return maxLength;\
    \}\
    public int longestStrChain(String[] words) \{\
        int ans = Integer.MIN_VALUE;\
        Map<String, Integer> memo = new HashMap<>();\
        Set<String> wordsPresent = new HashSet<>();\
        Collections.addAll(wordsPresent, words);\
        for(String word: words) \{\
            ans = Math.max(ans, dfs(wordsPresent, memo, word));\
        \}\
        return ans;\
    \}\
\}}