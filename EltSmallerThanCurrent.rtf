{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 class Solution \{\
    public int[] smallerNumbersThanCurrent(int[] nums) \{\
        int n = nums.length;\
        int b[] = nums.clone();\
        int[] counts = new int[n];\
        for(int i=0;i<n;i++) \{\
            for(int j = 0 ;j<n ;j++) \{\
                if(i!=j) \{\
                    if(nums[i] > nums[j])\
                        counts[i]++;\
                \}\
            \}\
        \}\
        return counts;\
    \}\
\}\
\
Binary Search \
\
class Solution \{\
    public int[] smallerNumbersThanCurrent(int[] nums) \{\
        int n=nums.length;\
        int[] numsCopy = nums.clone();\
        Arrays.sort(numsCopy);\
        int[] res= new int[n];\
        for(int i=0;i<n;i++) \{\
            res[i] = binSearch(numsCopy,nums[i]);\
        \}\
        return res;\
    \}\
    public int binSearch(int[] nums, int target) \{\
        int l=0, r=nums.length;\
        while(l<r) \{\
            int mid= l+(r-l)/2;\
            if(nums[mid] < target) l=mid+1;\
            else r=mid;\
        \}\
        return l;\
    \}\
\}}